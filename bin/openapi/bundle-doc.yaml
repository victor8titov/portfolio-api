openapi: 3.0.0
info:
  title: Portfolio REST API
  description: Api for backend project Portfolio
  contact:
    email: victor8titov@yandex.ru
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 0.0.1
servers:
  - url: 'http://localhost:3000/api'
    description: dev server
paths:
  /auth/login:
    get:
      tags:
        - auth
      summary: Logs user into the system
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  refreshToken:
                    type: string
                required:
                  - token
                  - refreshToken
                example:
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
  /auth/logout:
    get:
      tags:
        - auth
      summary: Logs out current logged in user session
      parameters:
        - in: query
          name: username
          description: User's name for logout
          schema:
            type: string
            example: admin
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  username:
                    type: string
                example:
                  username: admin
                  message: The user came out of the system
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
  /auth/refresh-token:
    post:
      tags:
        - auth
      summary: Create new token
      description: Create new token without login
      requestBody:
        description: These are needed to obtain tokens
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  required:
                    - refreshToken
              example:
                refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1login/get/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
  /homepage:
    get:
      tags:
        - homepage
      summary: Get homepage data
      description: Data displayed on the main
      parameters:
        - in: query
          name: language
          description: Data to obtain a content group
          schema:
            $ref: '#/components/schemas/Language'
      responses:
        '200':
          description: Request completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      currentLanguage:
                        $ref: '#/components/schemas/Language'
                      languages:
                        type: array
                        items:
                          $ref: '#/components/schemas/Language'
                    example:
                      currentLanguage: en
                      languages:
                        - ru
                        - en
                  - type: object
                    properties:
                      title:
                        type: string
                        readOnly: true
                      subtitle:
                        type: string
                        readOnly: true
                      description:
                        type: string
                        readOnly: true
                    example:
                      title: Text for title main page
                      subtitle: Text for subtitle main page
                      description: text description for main page
                  - type: object
                    properties:
                      avatars:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                            images:
                              type: array
                              items:
                                type: object
                                properties:
                                  id:
                                    type: string
                                  name:
                                    type: string
                                  description:
                                    type: string
                                  templateName:
                                    type: string
                                  width:
                                    type: number
                                  height:
                                    type: number
                                  url:
                                    type: string
                                required:
                                  - url
                    example:
                      avatars:
                        - type: black
                          images:
                            - id: xxxxxx
                              name: pic-500x500-mid.png
                              description: Photo is my when I was young
                              templateName: original
                              width: 500
                              height: 500
                              url: public/images/pic-500x500-mid.png
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
    post:
      tags:
        - homepage
      summary: Set homepage data
      description: Setting the fields for the main page
      security:
        - BearerAuth: []
      requestBody:
        description: Query body for data change
        content:
          application/json:
            schema:
              $ref: '#/paths/~1homepage/put/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: OK. Data saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  language:
                    type: string
                  message:
                    type: string
                example:
                  language: en
                  message: Data for home page successful saved
        '400':
          $ref: '#/components/responses/4XX'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/5XX'
    put:
      tags:
        - homepage
      description: Update the data for the home page
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    title:
                      $ref: '#/components/schemas/StringWithDivisionIntoLanguages'
                    subtitle:
                      $ref: '#/components/schemas/StringWithDivisionIntoLanguages'
                    description:
                      $ref: '#/components/schemas/StringWithDivisionIntoLanguages'
                  example:
                    title:
                      en: text in English
                      ru: На русском
                    subtitle:
                      en: text in English
                      ru: На русском
                    description:
                      en: text in English
                      ru: На русском
                - type: object
                  properties:
                    avatars:
                      type: array
                      items:
                        type: object
                        properties:
                          type:
                            type: string
                          imageId:
                            type: string
                  example:
                    avatars:
                      - type: black
                        imageId: ddfdzrn1dw
      responses:
        '200':
          description: OK. Data Update
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  message:
                    type: string
                example:
                  id: 3
                  message: Data for home page successful updated
        '400':
          $ref: '#/components/responses/4XX'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/5XX'
  /projects:
    get:
      tags:
        - projects
      description: Get a list of all projects
      parameters:
        - in: query
          name: page
          schema:
            type: number
          example: 2
        - in: query
          name: pageSize
          schema:
            type: number
          example: 10
        - in: query
          name: sort
          schema:
            $ref: '#/components/schemas/Sort'
        - in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
      responses:
        '200':
          description: Successfully receive list projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/PaginationInResponse'
                  sorted:
                    $ref: '#/components/schemas/Sort'
                  items:
                    type: array
                    items:
                      allOf:
                        - type: object
                          required:
                            - id
                          properties:
                            id:
                              type: string
                          example:
                            id: 10
                        - $ref: '#/paths/~1project~1%7Bid%7D/get/responses/200/content/application~1json/schema/allOf/1'
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
    post:
      tags:
        - projects
      description: Create a new project
      security:
        - BearerAuth: []
      requestBody:
        description: Data to create an essence project
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: object
                  properties:
                    ru:
                      type: string
                    en:
                      type: string
                type:
                  type: string
                stack:
                  type: array
                  items:
                    type: string
                spendTime:
                  type: string
                events:
                  $ref: '#/components/schemas/Events'
                imagesId:
                  type: array
                  items:
                    type: string
                links:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      link:
                        type: string
              required:
                - name
              example:
                name: Organic
                description:
                  en: description in English
                  ru: description in Russian
                type: template
                stack:
                  - html
                  - css
                spendTime: 2 days
                events:
                  - date: '2222-11-11'
                    status: release
                links:
                  - name: github
                    link: 'http://github.com/pupkin/project'
                  - name: live project
                    link: 'http://somedomain.com'
                imagesId:
                  - rlxkglndl
                  - xldkhsoox
      responses:
        '200':
          description: Entity project has been successfully created
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
                  message:
                    type: string
                example:
                  id: 11
                  message: Entity project has been successfully created
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
  '/project/{id}':
    get:
      tags:
        - projects
      description: Get data on one project
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID for find project
        - in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
      responses:
        '200':
          description: Successfully receive data on one project
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    required:
                      - id
                    properties:
                      id:
                        type: string
                    example:
                      id: 10
                  - type: object
                    properties:
                      languages:
                        $ref: '#/components/schemas/Languages'
                      currentLanguage:
                        $ref: '#/components/schemas/Language'
                      name:
                        type: string
                      description:
                        type: string
                      type:
                        type: string
                      stack:
                        type: array
                        items:
                          type: string
                      spendTime:
                        type: string
                      events:
                        $ref: '#/components/schemas/Events'
                      images:
                        type: array
                        items:
                          type: object
                          properties:
                            templateName:
                              type: string
                            width:
                              type: number
                            height:
                              type: number
                            url:
                              type: string
                            description:
                              type: string
                          required:
                            - url
                      links:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                            link:
                              type: string
                    example:
                      language:
                        - en
                        - ru
                      currentLanguage: ru
                      name: Organic
                      description: description in Russian
                      type: template
                      stack:
                        - html
                        - css
                      spendTime: time
                      events:
                        - date: '2222-11-11'
                          status: release
                      links:
                        - name: github
                          link: 'http://github.com/pupkin/project'
                        - name: live project
                          link: 'http://somedomain.com'
                      images:
                        - templateName: original
                          width: 500
                          height: 500
                          url: public/images/pic-500x500-mid.png
                          description: Photo is my when I was young
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
    put:
      tags:
        - projects
      description: Change the essence object completely
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Id for find project
      requestBody:
        description: New parameters for project
        content:
          application/json:
            schema:
              $ref: '#/paths/~1projects/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: Project change has passed successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
                  message:
                    type: string
                example:
                  id: 11
                  message: Project change has passed successfully
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
    delete:
      tags:
        - projects
      description: Delete the project
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Id for find project for delete
      responses:
        '200':
          description: Successful deleted the project
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
                  message:
                    type: string
                example:
                  id: 10
                  message: Successful deleted the project
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
  /skills:
    get:
      tags:
        - skills
      description: Get a list of skills
      parameters:
        - in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
      responses:
        '200':
          description: successfully received a list of skills
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                properties:
                  languages:
                    $ref: '#/components/schemas/Languages'
                  currentLanguage:
                    $ref: '#/components/schemas/Language'
                  groups:
                    type: array
                    items:
                      type: string
                    example:
                      - languages
                      - styles
                      - javascript libs
                      - devops
                  items:
                    type: array
                    items:
                      $ref: '#/paths/~1skill~1%7Bid%7D/get/responses/200/content/application~1json/schema/allOf/1'
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
    post:
      tags:
        - skills
      description: Creating a new skill
      security:
        - BearerAuth: []
      requestBody:
        description: Structure of new experience
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    name:
                      type: string
                      example: JavaScript
                    group:
                      type: string
                      example: language
                    level:
                      type: number
                      maximum: 10
                      minimum: 0
                      example: 5
                  required:
                    - name
                - type: object
                  properties:
                    description:
                      $ref: '#/components/schemas/StringWithDivisionIntoLanguages'
      responses:
        '200':
          $ref: '#/components/responses/200AfterSuccessfulChangesEntity'
        '400':
          $ref: '#/components/responses/4XX'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/5XX'
  '/skill/{id}':
    get:
      tags:
        - skills
      description: Get one entities skill by Id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: desc
        - in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
      responses:
        '200':
          description: Object experience received successfully
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      currentLanguage:
                        $ref: '#/components/schemas/Language'
                  - allOf:
                      - $ref: '#/paths/~1skills/post/requestBody/content/application~1json/schema/allOf/0'
                      - type: object
                        properties:
                          id:
                            type: string
                            example: 10
                          description:
                            type: string
                            example: text about this skill
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
    put:
      tags:
        - skills
      description: Change one entities skill by Id
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: desc
      requestBody:
        description: Modified object experience
        content:
          application/json:
            schema:
              $ref: '#/paths/~1skills/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          $ref: '#/components/responses/200AfterSuccessfulChangesEntity'
        '400':
          $ref: '#/components/responses/4XX'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/5XX'
    delete:
      tags:
        - skills
      description: Delete one entities skill by Id
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: desc
      responses:
        '200':
          $ref: '#/components/responses/200AfterSuccessfulChangesEntity'
        '400':
          $ref: '#/components/responses/4XX'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/5XX'
  /time-stamps:
    get:
      tags:
        - time-stamps
      parameters:
        - in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
      responses:
        '200':
          description: Received a list of time points successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  languages:
                    $ref: '#/components/schemas/Languages'
                  currentLanguage:
                    $ref: '#/components/schemas/Language'
                  items:
                    type: array
                    items:
                      $ref: '#/paths/~1time-stamp~1%7Bid%7D/get/responses/200/content/application~1json/schema/allOf/1'
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
    post:
      tags:
        - time-stamps
      description: Create a time stamp
      security:
        - BearerAuth: []
      requestBody:
        description: Time label fields
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    name:
                      type: string
                      example: Компания ООО Петрушка
                    link:
                      type: string
                      example: 'http://example.com'
                    events:
                      $ref: '#/components/schemas/Events'
                - type: object
                  properties:
                    description:
                      $ref: '#/components/schemas/StringWithDivisionIntoLanguages'
      responses:
        '200':
          $ref: '#/components/responses/200AfterSuccessfulChangesEntity'
        '400':
          $ref: '#/components/responses/4XX'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/5XX'
  '/time-stamp/{id}':
    get:
      tags:
        - time-stamps
      description: Get one time stamps
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: desc
        - in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
      responses:
        '200':
          description: Successfully received the data on the time stamp
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      currentLanguage:
                        $ref: '#/components/schemas/Language'
                  - allOf:
                      - $ref: '#/paths/~1time-stamps/post/requestBody/content/application~1json/schema/allOf/0'
                      - type: object
                        properties:
                          id:
                            type: string
                            example: 10
                          description:
                            type: string
                            example: text about job
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
    put:
      tags:
        - time-stamps
      description: Change one the Time stamp
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Id Time stamp for changing
      requestBody:
        description: New Data for Time stamp
        content:
          application/json:
            schema:
              $ref: '#/paths/~1time-stamps/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          $ref: '#/components/responses/200AfterSuccessfulChangesEntity'
        '400':
          $ref: '#/components/responses/4XX'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/5XX'
    delete:
      tags:
        - time-stamps
      description: Delete one of Time stamp
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: desc
      responses:
        '200':
          $ref: '#/components/responses/200AfterSuccessfulChangesEntity'
        '400':
          $ref: '#/components/responses/4XX'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/5XX'
  /callback:
    post:
      tags:
        - callback
      description: Send callback form
      requestBody:
        description: Structure of new experience
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: mymail@mail.com
                message:
                  type: string
                  example: 'Hello, I want you offer interesting idea about ...'
              required:
                - email
                - message
      responses:
        '200':
          description: Message is received
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your message is received and nearest time I answer you
                required:
                  - message
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
  /social-media:
    get:
      tags:
        - social-media
      description: Get list social media entities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/paths/~1social-media/post/requestBody/content/application~1json/schema/allOf/0'
                        - type: object
                          properties:
                            id:
                              type: string
                              example: 10
                            icon:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: 1
                                url:
                                  type: string
                                  example: public/images/pic-500x500-mid.png
                                name:
                                  type: string
                                  example: 'pic-500x500-mid.png,'
                                description:
                                  type: string
                                  example: Description about this icon
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
    post:
      tags:
        - social-media
      description: Create new link social media
      requestBody:
        description: Data for new link
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  required:
                    - link
                    - name
                  properties:
                    name:
                      type: string
                      example: Github
                    link:
                      type: string
                      example: 'http://github.com/user.git'
                - type: object
                  properties:
                    imageId:
                      type: string
                      example: ddfdzrn1dw
      responses:
        '200':
          $ref: '#/components/responses/200AfterSuccessfulChangesEntity'
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
  '/social-media/{id}':
    put:
      tags:
        - social-media
      description: Change one the social media
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: desc
      requestBody:
        description: New Data for social media
        content:
          application/json:
            schema:
              $ref: '#/paths/~1social-media/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          $ref: '#/components/responses/200AfterSuccessfulChangesEntity'
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
    delete:
      tags:
        - social-media
      description: Delete one of Social media
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: desc
      responses:
        '200':
          $ref: '#/components/responses/200AfterSuccessfulChangesEntity'
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
  /upload/image:
    post:
      tags:
        - upload
      description: upload image
      security:
        - BearerAuth: []
      requestBody:
        description: binary data
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File successfully upload to server
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 1
                  description:
                    type: string
                    example: Description image. It can be useful for alt properties in img tag
                  divisionByTemplates:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                          example: public/images/pic-500x500-mid.png
                        width:
                          type: string
                          example: 500
                        height:
                          type: string
                          example: 500
                        name:
                          type: string
                          example: 'pic-500x500-mid.png,'
                        template:
                          type: string
                          example: mid
                      required:
                        - url
                        - name
                required:
                  - id
                  - items
        '400':
          $ref: '#/components/responses/4XX'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/5XX'
  '/image/{id}':
    get:
      tags:
        - image
      description: Get information about uploading image
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID for find image
      responses:
        '200':
          description: Successfully receive data about image
          content:
            application/json:
              schema:
                $ref: '#/paths/~1upload~1image/post/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/4XX'
        '500':
          $ref: '#/components/responses/5XX'
    delete:
      tags:
        - image
      description: Delete image from server
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID for find image
      responses:
        '200':
          description: Successfully deleted image
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  message:
                    type: string
                required:
                  - id
                example:
                  id: klj009lkc
                  message: successful deleted
        '400':
          $ref: '#/components/responses/4XX'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/5XX'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Events:
      type: array
      items:
        type: object
        properties:
          date:
            type: string
            example: '2021-10-10T00:00:00.000Z'
          status:
            type: string
            example: status
        required:
          - date
          - status
    StringWithDivisionIntoLanguages:
      type: object
      properties:
        en:
          type: string
        ru:
          type: string
      example:
        en: Text in English
        ru: Текст на русском языке
    Sort:
      type: array
      items:
        type: string
      example:
        - +name
        - '-name'
    Language:
      type: string
      enum:
        - ru
        - en
      example: en
    Languages:
      type: array
      items:
        type: string
        enum:
          - ru
          - en
      example:
        - en
        - ru
    PaginationInRequest:
      type: object
      properties:
        page:
          type: number
          readOnly: true
        pageSize:
          type: number
          readOnly: true
      example:
        page: 1
        pageSize: 10
    PaginationInResponse:
      allOf:
        - $ref: '#/components/schemas/PaginationInRequest'
        - type: object
          properties:
            totalPages:
              type: number
              readOnly: true
          required:
            - totalPages
          example:
            totalPages: 100
    4XX:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                readOnly: true
              source:
                type: string
                readOnly: true
              type:
                type: string
                readOnly: true
      example:
        errors:
          - source: title
            type: TYPE_OF_ERROR
            message: Something is going wrong
  responses:
    '403':
      description: forbidden
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                readOnly: true
            example:
              message: Forbidden
    200AfterSuccessfulChangesEntity:
      description: Successful creating
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                example: 1
              message:
                type: string
                example: Successful
            required:
              - id
    4XX:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/4XX'
    5XX:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                readOnly: true
            example:
              message: Sorry internal server error
    UnauthorizedError:
      description: User unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/4XX'
